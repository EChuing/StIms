<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">



	<!-- 读取classpath下jdbc.properties中关于数据库配置信息 ,替换${xxx}中的值， xxx为变量 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:jdbc.properties</value>
				<!--要是有多个配置文件，只需在这里继续添加即可 --> 
			</list>
		</property>
	</bean>

	<!-- 1.数据源配置,采用dbcp作为数据库连接池 -->
	<bean id="db" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${driverClassName}"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>
		<property name="initialSize" value="5" /><!-- 初始化连接，连接池启动时创建的初始化连接数量（默认值为0） -->
		<property name="minIdle" value="5" /><!-- 最小空闲连接，连接池中最小的空闲的连接数，低于这个数量会被创建新的连接（默认为0，该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大，因为在机器很空闲的时候，也会创建低于minidle个数的连接，类似于jvm参数中的Xmn设置） -->
		<property name="maxIdle" value="40" /><!-- 最大空闲连接，连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制（默认为8个，maxIdle不能设置太小，因为假如在高负载的情况下，连接的打开时间比关闭的时间快，会引起连接池中idle的个数上升超过maxIdle，而造成频繁的连接销毁和创建，类似于jvm参数中的Xmx设置) -->
		<property name="maxActive" value="50" /><!-- 最大活动连接，连接池中可同时连接的最大的连接数（默认值为8） -->
		<property name="maxWait" value="3000" /><!-- 从池中取连接的最大等待时间，单位ms.当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待（默认为无限） -->
		<property name="validationQuery" value="SELECT 1" /><!-- 验证使用的SQL语句 -->
		<property name="testOnBorrow" value="false" /><!-- 借出连接时不要测试，否则很影响性能。一定要配置，因为它的默认值是true。false表示每次从连接池中取出连接时，不需要执行validationQuery = "SELECT 1" 中的SQL进行测试。若配置为true,对性能有非常大的影响，性能会下降7-10倍。 -->
		<property name="testOnReturn" value="false" /><!-- 表示将连接归还连接池前是否运行validationQuery，true=运行，false=不运行[默认]； -->
		<property name="testWhileIdle" value="true" /><!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除. -->
		<property name="timeBetweenEvictionRunsMillis" value="300000" /><!-- 每60秒运行一次空闲连接回收器，配置timeBetweenEvictionRunsMillis = "60000"后，每60秒运行一次空闲连接回收器（独立线程）。并每次检查3个连接，如果连接空闲时间超过30分钟就销毁。销毁连接后，连接数量就少了，如果小于minIdle数量，就新建连接，维护数量不少于minIdle，过行了新老更替。 -->
		<property name="minEvictableIdleTimeMillis" value="1800000" /><!-- 池中的连接空闲30分钟后被回收 -->
		<property name="numTestsPerEvictionRun" value="5" /><!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
		<property name="removeAbandoned" value="true" /><!-- 连接泄漏回收参数，当可用连接数少于3个时才执行  -->
		<property name="removeAbandonedTimeout" value="600" /><!-- 连接泄漏回收参数，600秒，泄露的连接可以被删除的超时值 -->
	</bean>
	<!-- 
		注意事项
		maxIdle值与maxActive值应配置的接近
		     当连接数超过maxIdle值后，刚刚使用完的连接（刚刚空闲下来）会立即被销毁。而不是想要的空闲M秒后再销毁起一个缓冲作用。若maxIdle与maxActive相差较大，在高负载的系统中会导致频繁的创建、销毁连接，连接数在maxIdle与maxActive间快速频繁波动，这不是想要的。高负载系统的maxIdle值可以设置为与maxActive相同或设置为-1(-1表示不限制)，让连接数量在minIdle与maxIdle间缓冲慢速波动。
		
		timeBetweenEvictionRunsMillis建议设置值
		minIdle要与timeBetweenEvictionRunsMillis配合使用才有用,单独使用minIdle不会起作用。
		
		initialSize="5"，会在tomcat一启动时，创建5条连接，效果很理想。但同时我们还配置了minIdle="10"，也就是说，最少要保持10条连接，那现在只有5条连接，哪什么时候再创建少的5条连接呢？
		     1、等业务压力上来了， DBCP就会创建新的连接。
		     2、配置timeBetweenEvictionRunsMillis=“时间”,DBCP会启用独立的工作线程定时检查，补上少的5条连接。销毁多余的连接也是同理。
	
		连接销毁的逻辑
		
		DBCP的连接数会在initialSize - minIdle - maxIdle - maxActive  之间变化。变化的逻辑描述如下：
		    默认未配置initialSize(默认值是0)和timeBetweenEvictionRunsMillis参数时，刚启动tomcat时，连接数是0。当应用有一个并发访问数据库时DBCP创建一个连接。目前连接数量还未达到minIdle，但DBCP也不自动创建新连接已使数量达到minIdle数量（没有一个独立的工作线程来检查和创建）。随着应用并发访问数据库的增多，连接数也增多，但都与minIdle值无关，很快minIdle被超越，minIdle值一点用都没有。直到连接的数量达到maxIdle值，这时的连接都是只增不减的。 再继续发展，连接数再增多并超过maxIdle时，使用完的连接（刚刚空闲下来的）会立即关闭，总体连接的数量稳定在maxIdle但不会超过maxIdle。
		    但活动连接（在使用中的连接）可能数量上瞬间超过maxIdle，但永远不会超过maxActive。这时如果应用业务压力小了，访问数据库的并发少了，连接数也不会减少（没有一个独立的线程来检查和销毁），将保持在maxIdle的数量。
		
		    默认未配置initialSize(默认值是0)，但配置了timeBetweenEvictionRunsMillis=“30000”（30秒）参数时，刚启动tomcat时，连接数是0。马上应用有一个并发访问数据库时DBCP创建一个连接。目前连接数量还未达到minIdle，每30秒DBCP的工作线程检查连接数是否少于minIdle数量，若少于就创建新连接直到达到minIdle数量。
		    随着应用并发访问数据库的增多，连接数也增多，直到达到maxIdle值。这期间每30秒DBCP的工作线程检查连接是否空闲了30分钟，若是就销毁。但此时是业务的高峰期，是不会有长达30分钟的空闲连接的，工作线程查了也是白查，但它在工作。到这里连接数量一直是呈现增长的趋势。
		    当连接数再增多超过maxIdle时，使用完的连接(刚刚空闲下来)会立即关闭，总体连接的数量稳定在maxIdle。停止了增长的趋势。但活动连接（在使用中的连接）可能数量上瞬间超过maxIdle，但永远不会超过maxActive。
		     这时如果应用业务压力小了，访问数据库的并发少了，每30秒DBCP的工作线程检查连接(默认每次查3条)是否空闲达到30分钟(这是默认值)，若连接空闲达到30分钟，就销毁连接。这时连接数减少了，呈下降趋势，将从maxIdle走向minIdle。当小于minIdle值时，则DBCP创建新连接已使数量稳定在minIdle，并进行着新老更替。
	-->
	
	<bean id="dataSource" class="com.zz.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String"></map>
        </property>
        <property name="defaultTargetDataSource" ref="db" />
    </bean>

	<!-- 2.mybatis FactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">

		<!-- 数据源注入Mybatis的sqlSessionFactory -->
		<property name="dataSource" ref="dataSource"></property>

		<!-- 自动扫描指定目录下的所有SQL映射的xml文件, 省掉手工配置 -->
		<!-- 如果配置文件xxxMapper.xml 和接口文件在同一包下，则可以不用该配置 -->
		<!-- 直接用39行的接口文件和Mapper文件扫描 -->
		<!-- <property name="mapperLocations" value="classpath:com/icss/dao/mapper/*.xml" /> -->

		<!-- 将制定包下的java PO对象都取别名为类名，不用带上一长串的包名 -->
		<property name="typeAliasesPackage" value="com.*.po.*"></property>
		
		<!-- 每次执行sql时打印sql语句 -->
		<property name="plugins">
			<array>
				<bean class="com.zz.other.SqlInterceptor"></bean>
			</array>
		</property>
	</bean>



	<!-- 3.mybatis 扫描加载MyBatis的 接口文件 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定MyBatis的 接口文件（或Mapper文件）位置 -->
		<property name="basePackage" value="com.*.mapper.*,com.zz.deviceevents" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

</beans>
